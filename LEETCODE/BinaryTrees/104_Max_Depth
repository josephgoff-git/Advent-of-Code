
# Passed as an array, solution not using creating tree using tree node 
# class Solution(object):
#     def maxDepth(self, nums, index=0):
#         """
#         :type nums: List[int]
#         :type index: int
#         :rtype: int
#         """
#         if index >= len(nums) or nums[index] is None:
#             return 0
#         else:
#             left_child_index = 2 * index + 1
#             right_child_index = 2 * index + 2

#             left_depth = self.maxDepth(nums, left_child_index)
#             right_depth = self.maxDepth(nums, right_child_index)

#             return max(left_depth, right_depth) + 1
        

# Passed as a tree node
# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0

        lh = self.maxDepth(root.left)
        rh = self.maxDepth(root.right) 

        return 1 + max(lh, rh)
    

sol = Solution()

# Example 1
tree1 = [3, 9, 20, None, None, 15, 7]
print(sol.maxDepth(tree1))  # Output: 3

# Example 2
tree2 = [1, None, 2]
print(sol.maxDepth(tree2))  # Output: 2